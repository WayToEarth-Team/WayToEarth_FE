import React, { useEffect, useRef, useState, useMemo } from "react";
import MapView, {
  Marker,
  Polyline,
  LatLng as RNLatLng,
} from "react-native-maps";
import { StyleSheet, View, Text, Pressable } from "react-native";
import type { LatLng } from "../../types/types";
import * as Location from "expo-location";

type JourneyLandmark = {
  id: string;
  name: string;
  position: LatLng;
  distance: string;
  reached: boolean;
};

type Props = {
  // Ïó¨Ï†ï Í≤ΩÎ°ú (ÎØ∏Î¶¨ Ï†ïÏùòÎêú Ï†ÑÏ≤¥ Í≤ΩÎ°ú)
  journeyRoute: LatLng[];
  // ÎûúÎìúÎßàÌÅ¨ Î™©Î°ù
  landmarks: JourneyLandmark[];
  // ÏÇ¨Ïö©Ïûê ÌòÑÏû¨ Îü¨Îãù Í≤ΩÎ°ú
  userRoute: LatLng[];
  // ÌòÑÏû¨ ÏúÑÏπò (Í∞ÄÏÉÅ ÏúÑÏπò)
  currentLocation: LatLng | null;
  // ÏßÑÌñâÎ•† (0~100)
  progressPercent: number;
  // ÏßÄÎèÑ Ï§ÄÎπÑ ÏôÑÎ£å ÏΩúÎ∞±
  onMapReady?: () => void;
  // Ïä§ÎÉÖÏÉ∑ Î∞îÏù∏Îî©
  onBindSnapshot?: (fn: () => Promise<string | null>) => void;
  // ÎûúÎìúÎßàÌÅ¨ ÎßàÏª§ ÌÅ¥Î¶≠ ÏΩúÎ∞±
  onLandmarkPress?: (landmark: JourneyLandmark) => void;
};

export default function JourneyMapRoute({
  journeyRoute,
  landmarks,
  userRoute,
  currentLocation,
  progressPercent,
  onMapReady,
  onBindSnapshot,
  onLandmarkPress,
}: Props) {
  const mapRef = useRef<MapView>(null);
  const [mapReady, setMapReady] = useState(false);
  const hasFittedRef = useRef(false);

  // Í∞ÄÏÉÅ ÏúÑÏπò(ÏßÑÌñâÎ•† Í∏∞Î∞ò ÎßàÏª§)Î°ú Ïù¥Îèô
  const moveToVirtualLocation = () => {
    if (!currentLocation) {
      // ÌòÑÏû¨ ÏúÑÏπòÍ∞Ä ÏóÜÏúºÎ©¥ Ïó¨Ï†ï ÏãúÏûëÏ†êÏúºÎ°ú Ïù¥Îèô
      if (journeyRoute.length > 0) {
        mapRef.current?.animateToRegion(
          {
            latitude: journeyRoute[0].latitude,
            longitude: journeyRoute[0].longitude,
            latitudeDelta: 0.01,
            longitudeDelta: 0.01,
          },
          500
        );
      }
      return;
    }

    // Í∞ÄÏÉÅ ÏúÑÏπò(ÏßÑÌñâÎ•† Í∏∞Î∞ò ÎßàÏª§)Î°ú Ïù¥Îèô
    mapRef.current?.animateToRegion(
      {
        latitude: currentLocation.latitude,
        longitude: currentLocation.longitude,
        latitudeDelta: 0.01,
        longitudeDelta: 0.01,
      },
      500
    );
  };

  // Ï¥àÍ∏∞ ÏßÄÎèÑ Ï§ëÏã¨ ÏÑ§Ï†ï (Ïó¨Ï†ï ÏãúÏûë ÏßÄÏ†ê) - useMemoÎ°ú Ï∫êÏã±
  const initialCenter: RNLatLng = useMemo(
    () => journeyRoute[0] || { latitude: 37.5665, longitude: 126.978 },
    [journeyRoute]
  );

  // Ï¥àÍ∏∞ ÏòÅÏó≠ Í≥ÑÏÇ∞ - useMemoÎ°ú Ï∫êÏã±
  const initialRegion = useMemo(() => {
    if (journeyRoute.length === 0) {
      return {
        latitude: 37.5665,
        longitude: 126.978,
        latitudeDelta: 0.05,
        longitudeDelta: 0.05,
      };
    }

    // Í≤ΩÎ°úÏùò Í≤ΩÍ≥Ñ Í≥ÑÏÇ∞
    let minLat = journeyRoute[0].latitude;
    let maxLat = journeyRoute[0].latitude;
    let minLng = journeyRoute[0].longitude;
    let maxLng = journeyRoute[0].longitude;

    journeyRoute.forEach(point => {
      minLat = Math.min(minLat, point.latitude);
      maxLat = Math.max(maxLat, point.latitude);
      minLng = Math.min(minLng, point.longitude);
      maxLng = Math.max(maxLng, point.longitude);
    });

    const centerLat = (minLat + maxLat) / 2;
    const centerLng = (minLng + maxLng) / 2;
    const latDelta = (maxLat - minLat) * 1.3; // Ïó¨Î∞± Ï∂îÍ∞Ä
    const lngDelta = (maxLng - minLng) * 1.3;

    return {
      latitude: centerLat,
      longitude: centerLng,
      latitudeDelta: Math.max(latDelta, 0.01),
      longitudeDelta: Math.max(lngDelta, 0.01),
    };
  }, [journeyRoute]);

  // ÏßÄÎèÑ Ï§ÄÎπÑ ÏôÑÎ£å Ïãú Ìïú Î≤àÎßå fitToCoordinates Ïã§Ìñâ
  useEffect(() => {
    if (!mapReady || journeyRoute.length === 0 || hasFittedRef.current) return;

    hasFittedRef.current = true;

    // Ïï†ÎãàÎ©îÏù¥ÏÖò ÏóÜÏù¥ Ï¶âÏãú fit (Îçî Îπ†Î¶Ñ)
    setTimeout(() => {
      mapRef.current?.fitToCoordinates(journeyRoute as RNLatLng[], {
        edgePadding: { top: 120, right: 80, bottom: 200, left: 80 },
        animated: false, // Ïï†ÎãàÎ©îÏù¥ÏÖò ÎπÑÌôúÏÑ±ÌôîÎ°ú ÏÜçÎèÑ Ìñ•ÏÉÅ
      });
    }, 100); // 300ms ‚Üí 100msÎ°ú Îã®Ï∂ï
  }, [mapReady]);

  // Ïä§ÎÉÖÏÉ∑ Î∞îÏù∏Îî©
  useEffect(() => {
    if (!onBindSnapshot) return;
    onBindSnapshot(async () => {
      if (!mapRef.current) return null;
      try {
        const uri = await (mapRef.current as any).takeSnapshot?.({
          width: 700,
          height: 360,
          format: "png",
          result: "file",
          quality: 1,
        });
        return (uri as string) ?? null;
      } catch (e) {
        console.warn("Ïä§ÎÉÖÏÉ∑ Ïã§Ìå®:", e);
        return null;
      }
    });
  }, [onBindSnapshot]);

  const handleMapReady = () => {
    setMapReady(true);
    onMapReady?.();
  };

  // ÏßÑÌñâÎ•†Ïóê Îî∞Îùº ÏôÑÎ£åÎêú Í≤ΩÎ°ú Íµ¨Í∞Ñ Í≥ÑÏÇ∞ - useMemoÎ°ú Ï∫êÏã±
  const { completedRoute, remainingRoute } = useMemo(() => {
    const completedRouteLength = Math.floor(
      (journeyRoute.length * progressPercent) / 100
    );
    const completed = journeyRoute.slice(0, Math.max(1, completedRouteLength));
    const remaining = journeyRoute.slice(Math.max(0, completedRouteLength - 1));

    return { completedRoute: completed, remainingRoute: remaining };
  }, [journeyRoute, progressPercent]);

  return (
    <View style={styles.container}>
      <MapView
        ref={mapRef}
        style={styles.map}
        initialRegion={initialRegion}
        showsUserLocation={false}
        showsMyLocationButton={false}
        onMapReady={handleMapReady}
        loadingEnabled={false}
        pitchEnabled={true}
        rotateEnabled={true}
        scrollEnabled={true}
        zoomEnabled={true}
        toolbarEnabled={false}
        moveOnMarkerPress={false}
        // ÏÑ±Îä• ÏµúÏ†ÅÌôî ÏòµÏÖò
        maxZoomLevel={20}
        minZoomLevel={10}
      >
      {/* ÏôÑÎ£åÎêú Ïó¨Ï†ï Í≤ΩÎ°ú (Ï¥àÎ°ùÏÉâ) */}
      {completedRoute.length > 1 && (
        <Polyline
          coordinates={completedRoute as RNLatLng[]}
          strokeWidth={6}
          strokeColor="#10B981"
          lineCap="round"
          lineJoin="round"
        />
      )}

      {/* ÎÇ®ÏùÄ Ïó¨Ï†ï Í≤ΩÎ°ú (ÌöåÏÉâ Ï†êÏÑ†) */}
      {remainingRoute.length > 1 && (
        <Polyline
          coordinates={remainingRoute as RNLatLng[]}
          strokeWidth={5}
          strokeColor="#94A3B8"
          lineDashPattern={[10, 5]}
          lineCap="round"
          lineJoin="round"
        />
      )}

      {/* ÏÇ¨Ïö©Ïûê Ïã§Ï†ú Îü¨Îãù Í≤ΩÎ°ú (ÌååÎûÄÏÉâ) */}
      {userRoute.length > 1 && (
        <Polyline
          coordinates={userRoute as RNLatLng[]}
          strokeWidth={5}
          strokeColor="#3B82F6"
          lineCap="round"
          lineJoin="round"
        />
      )}

      {/* ÎûúÎìúÎßàÌÅ¨ ÎßàÏª§ */}
      {landmarks.map((landmark, index) => (
        <Marker
          key={landmark.id}
          coordinate={landmark.position as RNLatLng}
          title={landmark.name}
          description={landmark.distance}
          onPress={() => onLandmarkPress?.(landmark)}
        >
          <View
            style={[
              styles.landmarkMarker,
              landmark.reached
                ? styles.landmarkMarkerReached
                : styles.landmarkMarkerPending,
            ]}
          >
            {landmark.reached ? (
              <Text style={styles.landmarkIconReached}>‚úì</Text>
            ) : (
              <Text style={styles.landmarkIconPending}>{index + 1}</Text>
            )}
          </View>
        </Marker>
      ))}

      {/* ÌòÑÏû¨ ÏúÑÏπò ÎßàÏª§ */}
      {currentLocation && (
        <Marker
          coordinate={currentLocation as RNLatLng}
          title="ÌòÑÏû¨ ÏúÑÏπò"
          anchor={{ x: 0.5, y: 0.5 }}
        >
          <View style={styles.currentLocationMarker}>
            <View style={styles.currentLocationDot} />
          </View>
        </Marker>
      )}
      </MapView>

      {/* Ïª§Ïä§ÌÖÄ ÏúÑÏπò Î≤ÑÌäº (Ïö∞Ï∏° ÏÉÅÎã®) - Í∞ÄÏÉÅ ÏúÑÏπòÎ°ú Ïù¥Îèô */}
      <Pressable style={styles.gpsButton} onPress={moveToVirtualLocation}>
        <Text style={styles.gpsIcon}>üìç</Text>
      </Pressable>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1 },
  map: { flex: 1 },
  gpsButton: {
    position: "absolute",
    top: 60,
    right: 16,
    width: 48,
    height: 48,
    borderRadius: 24,
    backgroundColor: "#fff",
    alignItems: "center",
    justifyContent: "center",
    shadowColor: "#000",
    shadowOpacity: 0.15,
    shadowRadius: 8,
    shadowOffset: { width: 0, height: 2 },
    elevation: 6,
  },
  gpsIcon: {
    fontSize: 24,
  },
  landmarkMarker: {
    width: 40,
    height: 40,
    borderRadius: 20,
    alignItems: "center",
    justifyContent: "center",
    borderWidth: 3,
    borderColor: "#fff",
    shadowColor: "#000",
    shadowOpacity: 0.3,
    shadowRadius: 4,
    shadowOffset: { width: 0, height: 2 },
    elevation: 5,
  },
  landmarkMarkerReached: {
    backgroundColor: "#10B981",
  },
  landmarkMarkerPending: {
    backgroundColor: "#6366F1",
  },
  landmarkIconReached: {
    color: "#fff",
    fontSize: 18,
    fontWeight: "bold",
  },
  landmarkIconPending: {
    color: "#fff",
    fontSize: 14,
    fontWeight: "bold",
  },
  currentLocationMarker: {
    width: 20,
    height: 20,
    borderRadius: 10,
    backgroundColor: "rgba(59, 130, 246, 0.2)",
    alignItems: "center",
    justifyContent: "center",
  },
  currentLocationDot: {
    width: 12,
    height: 12,
    borderRadius: 6,
    backgroundColor: "#3B82F6",
    borderWidth: 2,
    borderColor: "#fff",
  },
});
